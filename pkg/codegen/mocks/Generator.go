// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	codegen "github.com/github.com/VadimOcLock/vauth/pkg/codegen"
	mock "github.com/stretchr/testify/mock"
)

// Generator is an autogenerated mock type for the Generator type
type Generator struct {
	mock.Mock
}

// GenerateConfirmationCode provides a mock function with given fields:
func (_m *Generator) GenerateConfirmationCode() (codegen.Code, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfirmationCode")
	}

	var r0 codegen.Code
	var r1 error
	if rf, ok := ret.Get(0).(func() (codegen.Code, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() codegen.Code); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codegen.Code)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateResetCode provides a mock function with given fields:
func (_m *Generator) GenerateResetCode() (codegen.Code, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateResetCode")
	}

	var r0 codegen.Code
	var r1 error
	if rf, ok := ret.Get(0).(func() (codegen.Code, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() codegen.Code); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codegen.Code)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGenerator creates a new instance of Generator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Generator {
	mock := &Generator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
