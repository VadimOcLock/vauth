// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"

	store "github.com/github.com/VadimOcLock/vauth/internal/store"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateEmailConfirmation provides a mock function with given fields: ctx, dto
func (_m *Store) CreateEmailConfirmation(ctx context.Context, dto store.CreateEmailConfirmationDTO) (uuid.UUID, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailConfirmation")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateEmailConfirmationDTO) (uuid.UUID, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateEmailConfirmationDTO) uuid.UUID); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.CreateEmailConfirmationDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, dto
func (_m *Store) CreateToken(ctx context.Context, dto store.CreateTokenDTO) (uuid.UUID, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateTokenDTO) (uuid.UUID, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateTokenDTO) uuid.UUID); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.CreateTokenDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, dto
func (_m *Store) CreateUser(ctx context.Context, dto store.CreateUserDTO) (uuid.UUID, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateUserDTO) (uuid.UUID, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.CreateUserDTO) uuid.UUID); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.CreateUserDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsUserByLogin provides a mock function with given fields: ctx, login
func (_m *Store) ExistsUserByLogin(ctx context.Context, login string) (bool, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for ExistsUserByLogin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByConfirmationCode provides a mock function with given fields: ctx, code
func (_m *Store) FindUserByConfirmationCode(ctx context.Context, code string) (store.User, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByConfirmationCode")
	}

	var r0 store.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (store.User, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) store.User); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(store.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *Store) FindUserByEmail(ctx context.Context, email string) (store.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 store.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (store.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) store.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(store.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PgTx provides a mock function with given fields: ctx, handler
func (_m *Store) PgTx(ctx context.Context, handler func(pgx.Tx, store.Store) error) error {
	ret := _m.Called(ctx, handler)

	if len(ret) == 0 {
		panic("no return value specified for PgTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(pgx.Tx, store.Store) error) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUserWithConfirmation provides a mock function with given fields: ctx, dto
func (_m *Store) RegisterUserWithConfirmation(ctx context.Context, dto store.RegisterUserWithConfirmationDTO) error {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUserWithConfirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.RegisterUserWithConfirmationDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserAsVerified provides a mock function with given fields: ctx, email
func (_m *Store) UpdateUserAsVerified(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAsVerified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: ctx, dto
func (_m *Store) UpdateUserPassword(ctx context.Context, dto store.UpdateUserPasswordDTO) error {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.UpdateUserPasswordDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
