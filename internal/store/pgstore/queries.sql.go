// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailConfirmation = `-- name: CreateEmailConfirmation :one
INSERT INTO email_confirmations(id, user_id, code, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateEmailConfirmationParams struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	UserID    uuid.NullUUID    `db:"user_id" json:"user_id"`
	Code      string           `db:"code" json:"code"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateEmailConfirmation(ctx context.Context, arg CreateEmailConfirmationParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createEmailConfirmation,
		arg.ID,
		arg.UserID,
		arg.Code,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens(id, user_id, token, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTokenParams struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	UserID    uuid.UUID        `db:"user_id" json:"user_id"`
	Token     string           `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamp `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, created_at, updated_at)
VALUES ($1, $2, $3, timezone('utc', now()), timezone('utc', now()))
RETURNING id
`

type CreateUserParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	Email        string    `db:"email" json:"email"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const existsUserByEmail = `-- name: ExistsUserByEmail :one
SELECT EXISTS(
    SELECT 1
    FROM users
    WHERE email = $1
)
`

func (q *Queries) ExistsUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findUserByConfirmationCode = `-- name: FindUserByConfirmationCode :one
SELECT u.id, u.email, u.password_hash, u.created_at, u.updated_at, u.is_verified
FROM users u
WHERE id = (SELECT ec.user_id FROM email_confirmations ec WHERE code = $1)
`

func (q *Queries) FindUserByConfirmationCode(ctx context.Context, code string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByConfirmationCode, code)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, is_verified
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const updateUserAsVerified = `-- name: UpdateUserAsVerified :one
UPDATE users
SET is_verified = true,
    updated_at = timezone('utc', NOW())
WHERE email = $1
RETURNING TRUE AS updated
`

func (q *Queries) UpdateUserAsVerified(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, updateUserAsVerified, email)
	var updated bool
	err := row.Scan(&updated)
	return updated, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash = $1,
    updated_at = timezone('utc', NOW())
WHERE email = $2
RETURNING TRUE AS updated
`

type UpdateUserPasswordParams struct {
	PasswordHash string `db:"password_hash" json:"password_hash"`
	Email        string `db:"email" json:"email"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (bool, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.PasswordHash, arg.Email)
	var updated bool
	err := row.Scan(&updated)
	return updated, err
}
