// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash, permissions, created_at, updated_at)
VALUES ($1, $2, $3, $4::jsonb, timezone('utc', now()), timezone('utc', now()))
    RETURNING id
`

type CreateUserParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	Email        string    `db:"email" json:"email"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
	Column4      string    `db:"column_4" json:"column_4"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Column4,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const existsUserByEmail = `-- name: ExistsUserByEmail :one
SELECT EXISTS(
    SELECT 1
    FROM users
    WHERE email = $1
)
`

func (q *Queries) ExistsUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, permissions, is_active, is_verified
FROM users
WHERE email = $1
    LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Permissions,
		&i.IsActive,
		&i.IsVerified,
	)
	return i, err
}
